#!/bin/bash
NAMESPACE_PREFIX=marmalade
VETH_PREFIX=gen.veth.

# Report an error.
error() {
    echo "error: $1" 1>&2
    exit ${2:-1}
}

usage() {
    error "$(echo -en "Usage:\n" \
        "$0 --start-jam <jam name>\n" \
        "$0 --launch-generator <jam name> <player ID> <generator name> <instance ID>\n" \
        "$0 --stop-jam <jam name>\n" \
        "$0 --help\n")" $1
}

# Check if the given namespace exists.
does_exist() {
    ip netns list | grep -q "^$1 *" && return 0 || return 1
}

# Create a new network namespace with the given name and raise the loopback interface.
# Exit with an error if the namespace already exists.
create_namespace() {
    ip netns list | does_exist "$1" && error "namespace $1 already exists"
    ip netns add "$1"
    ip netns exec "$1" ip link set lo up && return 0
    echo error "failed to initialize namespace $1"
}

# Given the jam name, set the global JAM_NAMESPACE variable accordingly.
# By default, ensure the namespace exists, exiting with an error if it does not.
# Given an additional truthy argument, it tries to create the namespace, exiting with an error if it already exists.
# Using the global variable instead of returning the name avoids having to run
# the function in a subshell in order to capture the output, which would mean
# an error in the function would only exit the subshell.
set_jam_namespace() {
    local jam_namespace="$NAMESPACE_PREFIX:$1"
    local should_create="$2"
    if [ "$should_create" ]; then
        create_namespace "$jam_namespace"
    elif ! does_exist "$jam_namespace"; then
        error "namespace $jam_namespace does not exist"
    fi
    JAM_NAMESPACE="$jam_namespace"
}

# Get a strong random password.
generate_password() {
    tr -dc 'a-za-z0-9' < /dev/urandom | head -c 32
}

# Start a jam.
start_jam() {
    set_jam_namespace "$1" create
    echo "created namespace $JAM_NAMESPACE"
    local redis_password=$(generate_password)
    mkdir -p "./jams/$1/redis"
    echo "$redis_password" > "./jams/$1/redis/auth"
    ip netns exec "$JAM_NAMESPACE" \
        redis-server --daemonize yes --requirepass "$redis_password" \
            --dir "./jams/$1" --save '' --appendonly yes --appenddirname redis
    echo "redis server started in namespace $JAM_NAMESPACE"
}

# Just a simple IPv4 address incrementer for creating more and more veth interfaces for the generators.
increment_ip() {
    local -a octets
    IFS='.' read -r -a octets <<< "$1"
    for (( i=3; i>=0; i-- )); do
        [ $((++octets[i])) -lt 256 ] && break
        [ $i -eq 0 ] && error "IP address overflow"
        octets[i]=0
    done
    echo "${octets[0]}.${octets[1]}.${octets[2]}.${octets[3]}"
}

# Get the next available veth interface name in the given namespace, and two matching available IP addresses.
next_veth() {
    local max_veth=$(ip netns exec "$1" ip -o link show | cut -d' ' -f2 | \
        grep -o "^$VETH_PREFIX[0-9]\+@" | sort -n | tail -1 | head -c-2)
    if ! [ "$max_veth" ]; then
        echo "$VETH_PREFIX"'0 10.24.68.0 10.24.68.1'
        return
    fi
    local max_veth_number=${max_veth:${#VETH_PREFIX}}
    local new_generator_ifname="$VETH_PREFIX$((max_veth_number + 1))"
    local max_ip=$(ip netns exec "$1" ip -o addr show "$max_veth" | \
        grep -o "10\.[0-9]\+\.[0-9]\+\.[0-9]\+")
    local new_generator_ip=$(increment_ip $max_ip)
    local new_jam_ip=$(increment_ip $new_generator_ip)
    echo "$new_generator_ifname $new_generator_ip $new_jam_ip"
}

# Launch a generator.
launch_generator() {
    set_jam_namespace "$1"
    local generator_id="$2:$3:$4"
    local generator_namespace="$JAM_NAMESPACE:$generator_id"
    does_exist "$generator_namespace" && error "namespace $generator_namespace already exists"
    create_namespace "$generator_namespace"

    # Set up a veth pair between the generator namespace and the jam namespace.
    local generator_veth_name="jam.veth0"
    local jam_veth_name generator_veth_ip jam_veth_ip
    read jam_veth_name generator_veth_ip jam_veth_ip <<< $(next_veth "$JAM_NAMESPACE")
    ip link add "$generator_veth_name" type veth peer name "$jam_veth_name"
    ip link set "$generator_veth_name" netns "$generator_namespace"
    ip link set "$jam_veth_name" netns "$JAM_NAMESPACE"
    ip netns exec "$JAM_NAMESPACE" ip link set "$jam_veth_name" up
    ip netns exec "$generator_namespace" ip link set "$generator_veth_name" up
    ip netns exec "$JAM_NAMESPACE" ip addr add $jam_veth_ip/31 dev "$jam_veth_name"
    ip netns exec "$generator_namespace" ip addr add "$generator_veth_ip/31" dev "$generator_veth_name"

    # Set up a tap interface in the generator namespace for the Firecracker VM.
    ip netns exec "$generator_namespace" ip tuntap add tap0 mode tap
    ip netns exec "$generator_namespace" ip link set tap0 up
    ip netns exec "$generator_namespace" ip addr add 172.16.0.1/24 dev tap0

    # Forward the Redis server port for standard access.
    ip netns exec "$generator_namespace" sysctl -w net.ipv4.ip_forward=1
    ip netns exec "$generator_namespace" iptables -t nat -A PREROUTING \
        -d 172.16.0.1 -p tcp --dport 6379 -j DNAT --to- $jam_veth_ip:6379
    ip netns exec "$generator_namespace" iptables -t nat -A POSTROUTING \
        -d $jam_veth_ip -p tcp --dport 6379 -j MASQUERADE

    # set a password for the redis server.
    redis_password=$(generate_password)
    ip netns exec "$JAM_NAMESPACE" redis-cli -a "$(cat ./jams/$1/redis/auth)" \
        ACL SETUSER $generator_id ON ">$redis_password" RESETKEYS RESETCHANNELS \
        "~$generator_id:*" "&$generator_id:*" '+psubscribe|*' '%R~*' +@all -@dangerous

    # "serve" both the redis credentials and the generator itself.
    echo -e "$generator_id\n$redis_password" | ip netns exec "$generator_namespace" busybox nc -lp1234 &
    ip netns exec "$generator_namespace" busybox nc -lp2468 < "./generators/$2:$3.tgz" &

    # Run the Firecracker VM.
    ip netns exec "$generator_namespace" /usr/local/bin/firecracker \
        --config-file /usr/local/etc/marmalade/firecracker_config.json \
        --api-sock "./jams/$1/$2/$3/$4/firecracker.sock"

    # Clean up.
    ip netns delete "$generator_namespace"
}

safely_delete_generator_namespace() {
    # Check if there are any running processes in the namespace.
    local pids="$(ip netns pids "$1")"
    if [ "$pids" ]; then
        # If there is something other than the Firecracker VM running, return an error.
        ps -ocmd= -p $pids | grep -qv "/usr/local/bin/firecracker" && \
            error "running processes in namespace $1"
        # Kill the Firecracker VM.
        kill $pids
        # Wait for the VM to die.
        sleep 1
        # Verify the namespace is clean.
        [ "$(ip netns pids "$1")" ] && \
            error "running processes in namespace $1"
    fi
    # Delete the namespace.
    ip netns delete "$1"
}

stop_jam() {
    set_jam_namespace "$1"
    ip netns exec "$JAM_NAMESPACE" redis-cli -a "$(cat ./jams/$1/redis/auth)" SHUTDOWN
    [ "$(ip netns pids "$JAM_NAMESPACE")" ] && \
        error "found running processes in namespace $JAM_NAMESPACE"
    for netns in $(ip netns list | cut -d' ' -f1 | grep "^$JAM_NAMESPACE:"); do
        safely_delete_generator_namespace "$netns" &
    done
    wait
    ip netns list | grep "^$JAM_NAMESPACE:" && \
        error "failed to delete all generator namespaces connected to $JAM_NAMESPACE"
    ip netns delete "$JAM_NAMESPACE"
}

cli_handler() {
    [ $# -eq 0 ] && usage 1 || while [ $# -gt 0 ]; do
        case $1 in
            --help)
                usage 0
                ;;
            --start-jam|--stop-jam)
                [ $# -lt 2 ] && usage 1
                [ $1 == "--start-jam" ] && start_jam "$2" || stop_jam "$2"
                shift 2
                ;;
            --launch-generator)
                [ $# -lt 5 ] && usage 1
                launch_generator "$2" "$3" "$4" "$5"
                shift 5
                ;;
            *)
                usage 1
                ;;
        esac
    done
}

# If the script is sourced, return without executing.
[ "$BASH_SOURCE" == "$0" ] || return 0


# Make sure the script is run as root.
if [ ! $EUID = 0 ]; then
    sudo $0 "$@"
    exit
fi
cli_handler "$@"
